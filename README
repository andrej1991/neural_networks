1)DESCRIPTION

This program is ment for image classification with neural networks.


2) SAMPLE CONFIG

training_input: "<some path>/input.dat"
required_training_output: "<some path>/required_output.dat"
validation_input: "<some path>/validation_input.dat"
required_validation_output: "<some path>/validation_output.dat"
input_row: 28
input_col: 28
input_channel_count: 1  #in case of RGB picture it's 3
output_size: 10
epochs: 10
minibatch_count: -1
minibatch_len: 10
learning_rate: 0.003
momentum: 0.9
denominator: 0.00001
regularization_rate: 10
traninig_data_len: 50000
validation_data_len: 10000
dropout_probability: 0.0
cost_function_type: 'log_likelihood'
layers:
    - layer-0:
        layer_type: "convolutional"
        neuron_type: 'tanh'
        weights_row: 4
        weights_col: 4
        horizontal_stride: 2
        vertical_stride: 2
        feature_map_count: 20
    - layer-1:
        layer_type: 'maxpooling'
        filter_row: 2
        filter_col: 2
    - layer-2:
        layer_type: "convolutional"
        neuron_type: 'tanh'
        weights_row: 3
        weights_col: 3
        horizontal_stride: 2
        vertical_stride: 2
        feature_map_count: 40
    - layer-3:
        layer_type: 'maxpooling'
        filter_row: 2
        filter_col: 2
    - layer-4:
        layer_type: 'fully_connected'
        neuron_type: 'tanh'
        weights_row: 100
    - layer-5:
        layer_type: 'softmax'
        weights_row: 10
        

The name of the layers can be anything, but for simplicity I'd recomend to use the "layer-<id>" format.

Supported layer types are: convolutional, fully_connected, softmax and pooling
Supported neuron types are: sigmoid, tanh, relu, leaky_relu
Supported cost functions are: quadratic, cross_entropy and log_likellyhood


3) STRUCTURE OF THE TRAINING AND VALIDATION DATA

Input and output has to be in a separate file.
The current limitation is that all the training data needs to be in one file. This limitation is applicable for the required output also.

3.1) The structure of the input data
The chanels of an input image are followed one by one. For example in case of RGB image first all the red pixels are stored then all the blue and finally all the green.
Then it is followed by the next image. All the data is stored in double format.
Reading in the image from bmp is planned.

3.2) The structure of the required training output
The length of the required output vector is the same as the count of the neurons in the final layer.
All the elements of that vector is stored in double.
In case of image classification all the values are 0.0 of the required output vector, but the value of the index which is mapped to the category of the input image.
That one value is 1.0.


4) DEPENDENCIES

libyaml-cpp


5) BUILDING THE BINARY

This project is written in Code Blocks. The project file (neural_networks.cbp) is included in the repo.


6) EXECUTION SAMPLE

The first argument of the program is the configuration file. An example in Unix based systems:

/path/to/your/binary/neural_networks /path/to/your/config/config.yaml




